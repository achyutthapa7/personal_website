"use client";
import React from "react";
import {
  FaReact,
  FaNode,
  FaDatabase,
  FaStripeS,
  FaClock,
} from "react-icons/fa";
// import project1 from "../../../assets/project1.mp4";
import Videoplayer from "@/components/Videoplayer";
const projects = [
  {
    id: 1,
    title: "E-Commerce Platform",
    description:
      "A fully functional e-commerce site with Stripe payment integration and task scheduling using node-cron.",
    technologies: [
      {
        name: "React",
        icon: <FaReact className="text-6xl text-blue-600" />,
        explanation:
          "React is used for building dynamic and interactive user interfaces with reusable components.",
      },
      {
        name: "Node.js",
        icon: <FaNode className="text-6xl text-green-600" />,
        explanation:
          "Node.js enables server-side scripting and handles backend logic, providing a scalable and efficient environment.",
      },
      {
        name: "MongoDB",
        icon: <FaDatabase className="text-6xl text-green-800" />,
        explanation:
          "MongoDB stores data in a flexible, JSON-like format, making it ideal for applications requiring scalability and fast iterations.",
      },
      {
        name: "Stripe",
        icon: <FaStripeS className="text-6xl text-blue-500" />,
        explanation:
          "Stripe is a payment gateway that provides a seamless and secure way to process payments online.",
      },
      {
        name: "Node-cron",
        icon: <FaClock className="text-6xl text-gray-600" />,
        explanation:
          "Node-cron is used to schedule and automate tasks, such as periodically deleting unverified users from the database.",
      },
    ],
    challenges:
      "Integrating multiple payment methods and scheduling tasks for user management.",
    solutions:
      "Used Stripe API for seamless payment integration and Node-cron for task scheduling.",
    outcome:
      "Enhanced user engagement, streamlined user management, and increased sales.",
    videoUrl: "project1", // Replace with your video URL
    folderStructure: `
      /ecommerce-platform
│
├── /backend               # Backend folder (Node.js + Express)
│   ├── /config            # Configuration (e.g., environment variables, database)
│   ├── /controllers       # Business logic and request handling
│   ├── /models            # Mongoose models for MongoDB
│   ├── /routes            # API routes (e.g., auth, products, orders)
│   ├── /middleware        # Custom middleware (e.g., auth, error handling)
│   ├── /utils             # Utility functions (e.g., token generation, email, etc.)
│   ├── server.js          # Main entry point for the backend server
│   ├── .env               # Environment variables (e.g., database URL, secret keys)
│   └── package.json       # Backend dependencies and scripts
│
├── /frontend              # Frontend folder (React)
│   ├── /src
│   │   ├── /components    # Reusable UI components (e.g., product cards, buttons)
│   │   ├── /pages         # Application pages (e.g., Home, Product, Checkout)
│   │   ├── /context       # Global state management (e.g., Context API, Redux)
│   │   ├── /services      # API services (e.g., fetch products, user authentication)
│   │   ├── /assets        # Static assets (e.g., images, icons, videos)
│   │   ├── App.js         # Main application component
│   │   ├── index.js       # Entry point for the React app
│   │   ├── /styles        # CSS or SCSS files
│   │   └── /hooks         # Custom hooks (e.g., useAuth, useCart)
│   ├── package.json       # Frontend dependencies and scripts
│
├── /node_modules          # Auto-generated by npm or yarn
├── .gitignore             # Git ignore rules
├── README.md              # Project documentation
└── package.json           # Root package.json if using a monorepo (optional)

    `,
  },
  {
    id: 2,
    title: "Social Media Application",
    description:
      "A dynamic social media platform with user profiles, post functionalities, and real-time updates.",
    technologies: [
      {
        name: "React",
        icon: <FaReact className="text-6xl text-blue-600" />,
        explanation:
          "React is used for building dynamic and interactive user interfaces with reusable components.",
      },
      {
        name: "Node.js",
        icon: <FaNode className="text-6xl text-green-600" />,
        explanation:
          "Node.js enables server-side scripting and handles backend logic, providing a scalable and efficient environment.",
      },
      {
        name: "MongoDB",
        icon: <FaDatabase className="text-6xl text-green-800" />,
        explanation:
          "MongoDB stores data in a flexible, JSON-like format, making it ideal for applications requiring scalability and fast iterations.",
      },
      {
        name: "Node-cron",
        icon: <FaClock className="text-6xl text-gray-600" />,
        explanation:
          "Node-cron is used to schedule tasks, which can include automated data management or periodic updates.",
      },
    ],
    challenges: "Ensuring real-time updates for posts and comments.",
    solutions: "Implemented WebSocket for real-time communication.",
    outcome: "Enhanced user interaction and retention.",
    videoUrl: "", // Replace with your video URL
    folderStructure: `
      /social-media-app
│
├── /backend               # Backend folder (Node.js + Express)
│   ├── /config            # Configuration (e.g., environment variables, database connection)
│   ├── /controllers       # Business logic and request handling (e.g., post, comment, user)
│   ├── /models            # Mongoose models for MongoDB (e.g., Post, User, Comment)
│   ├── /routes            # API routes (e.g., posts, users, comments)
│   ├── /middleware        # Custom middleware (e.g., auth, error handling)
│   ├── /utils             # Utility functions (e.g., token generation, password hashing)
│   ├── server.js          # Main entry point for the backend server
│   ├── .env               # Environment variables (e.g., database URL, secret keys)
│   └── package.json       # Backend dependencies and scripts
│
├── /frontend              # Frontend folder (React)
│   ├── /src
│   │   ├── /components    # Reusable UI components (e.g., Post, Comment, ProfileCard)
│   │   ├── /pages         # Application pages (e.g., Home, Profile, PostDetail)
│   │   ├── /context       # Global state management (e.g., Context API for authentication, posts)
│   │   ├── /services      # API services (e.g., user authentication, post handling, comments)
│   │   ├── /assets        # Static assets (e.g., images, icons, videos)
│   │   ├── /hooks         # Custom hooks (e.g., useAuth, usePost)
│   │   ├── App.js         # Main application component
│   │   ├── index.js       # Entry point for the React app
│   │   ├── /styles        # CSS or SCSS files for styling components and pages
│   │   └── /utils         # Utility functions (e.g., formatting dates, handling likes)
│   ├── package.json       # Frontend dependencies and scripts
│
├── /node_modules          # Auto-generated by npm or yarn
├── .gitignore             # Git ignore rules
├── README.md              # Project documentation
└── package.json           # Root package.json if using a monorepo (optional)

    `,
  },
];

const ProjectDetail = ({ params }) => {
  const projectTitle = decodeURIComponent(params.slug);
  console.log(projectTitle);
  const project = projects.find((p) => p.title === projectTitle);
  if (!project) return <>Project not found</>;
  return (
    <div className="container mx-auto px-4 py-16 bg-white text-black">
      <h2 className="text-4xl font-bold mb-6 mt-11">{project.title}</h2>
      <p className="text-lg mb-6">{project.description}</p>

      <h3 className="text-2xl font-semibold mb-4">Technologies Used:</h3>
      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 mb-6">
        {project.technologies.map((tech, index) => (
          <div
            key={index}
            className="flex flex-col items-center bg-gray-50 p-4 rounded-lg shadow-md"
          >
            <div className="flex items-center justify-center mb-2">
              {tech.icon}
            </div>
            <p className="text-lg font-semibold mb-1">{tech.name}</p>
            <p className="text-sm text-gray-600 text-center">
              {tech.explanation}
            </p>
          </div>
        ))}
      </div>

      <h3 className="text-2xl font-semibold mb-4">Challenges:</h3>
      <p className="mb-4">{project.challenges}</p>

      <h3 className="text-2xl font-semibold mb-4">Solutions:</h3>
      <p className="mb-4">{project.solutions}</p>

      <h3 className="text-2xl font-semibold mb-4">Outcome:</h3>
      <p className="mb-6">{project.outcome}</p>

      <h3 className="text-2xl font-semibold mb-4">Project Showcase Video:</h3>
      <div className="mb-6">
        <Videoplayer src={project.videoUrl} />
      </div>

      <h3 className="text-2xl font-semibold mb-4">Folder Structure:</h3>
      <pre className="bg-gray-100 p-4 rounded-md overflow-scroll max-h-[500px] text-black">
        <code>{project.folderStructure}</code>
      </pre>
    </div>
  );
};

export default ProjectDetail;
